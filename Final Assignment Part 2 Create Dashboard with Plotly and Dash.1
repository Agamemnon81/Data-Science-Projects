#!/usr/bin/env python
# coding: utf-8

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Load the data
data = pd.read_csv(
    'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv'
)

# Initialize the Dash app
app = dash.Dash(__name__)

# Dropdown options for report types
dropdown_options = [
    {'label': 'Yearly Statistics', 'value': 'Yearly Statistics'},
    {'label': 'Recession Period Statistics', 'value': 'Recession Period Statistics'}
]

# List of years for dropdown
year_list = [i for i in range(1980, 2024)]

# App layout
app.layout = html.Div([
    html.H1(
        "Automobile Sales Statistics Dashboard",
        style={'textAlign': 'center', 'color': '#503D36', 'fontSize': 24}
    ),

    html.Div([
        html.Label("Select Report Type:"),
        dcc.Dropdown(
            id='dropdown-statistics',
            options=dropdown_options,
            placeholder='Select a report type',
            style={'width': '50%'}
        )
    ], style={'padding': '10px'}),

    html.Div([
        html.Label("Select Year:"),
        dcc.Dropdown(
            id='select-year',
            options=[{'label': str(year), 'value': year} for year in year_list],
            placeholder='Select a year',
            value=None,
            disabled=True,  # Initially disabled until Yearly Statistics selected
            style={'width': '50%'}
        )
    ], style={'padding': '10px'}),

    html.Div(id='output-container', style={'padding': '20px'})
])

# Callback to enable/disable year dropdown based on report type
@app.callback(
    Output('select-year', 'disabled'),
    Input('dropdown-statistics', 'value')
)
def toggle_year_dropdown(selected_statistics):
    if selected_statistics == 'Yearly Statistics':
        return False  # Enable year dropdown
    else:
        return True   # Disable year dropdown

# Callback to update output container with graphs based on selections
@app.callback(
    Output('output-container', 'children'),
    [Input('dropdown-statistics', 'value'),
     Input('select-year', 'value')]
)
def update_output(selected_statistics, selected_year):
    if selected_statistics == 'Recession Period Statistics':
        recession_data = data[data['Recession'] == 1]

        # Plot 1: Automobile sales fluctuate over Recession Period (year wise) - line chart
        yearly_rec = recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        R_chart1 = dcc.Graph(
            figure=px.line(
                yearly_rec,
                x='Year',
                y='Automobile_Sales',
                title='Automobile Sales Over Recession Period (Year-wise)'
            )
        )

        # Plot 2: Average vehicles sold by vehicle type - bar chart
        average_sales = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        R_chart2 = dcc.Graph(
            figure=px.bar(
                average_sales,
                x='Vehicle_Type',
                y='Automobile_Sales',
                title='Average Vehicles Sold by Vehicle Type During Recession'
            )
        )

        # Plot 3: Total advertising expenditure share by vehicle type - pie chart
        exp_rec = recession_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        R_chart3 = dcc.Graph(
            figure=px.pie(
                exp_rec,
                values='Advertising_Expenditure',
                names='Vehicle_Type',
                title='Advertising Expenditure Share by Vehicle Type During Recession'
            )
        )

        # Plot 4: Effect of unemployment rate on vehicle type and sales - bar chart
        unemp_data = recession_data.groupby(['unemployment_rate', 'Vehicle_Type'])['Automobile_Sales'].mean().reset_index()
        R_chart4 = dcc.Graph(
            figure=px.bar(
                unemp_data,
                x='unemployment_rate',
                y='Automobile_Sales',
                color='Vehicle_Type',
                labels={'unemployment_rate': 'Unemployment Rate', 'Automobile_Sales': 'Average Automobile Sales'},
                title='Effect of Unemployment Rate on Vehicle Type and Sales'
            )
        )

        # Layout with two rows and two columns
        return html.Div([
            html.Div([R_chart1, R_chart2], style={'display': 'flex', 'justifyContent': 'space-around'}),
            html.Div([R_chart3, R_chart4], style={'display': 'flex', 'justifyContent': 'space-around', 'marginTop': '20px'})
        ])

    elif selected_statistics == 'Yearly Statistics' and selected_year is not None:
        yearly_data = data[data['Year'] == selected_year]

        # Plot 1: Yearly Automobile sales over the whole period - line chart
        yas = data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        Y_chart1 = dcc.Graph(
            figure=px.line(
                yas,
                x='Year',
                y='Automobile_Sales',
                title='Yearly Automobile Sales Over the Years'
            )
        )

        # Plot 2: Total monthly automobile sales - line chart
        mas = data.groupby('Month')['Automobile_Sales'].sum().reset_index()
        Y_chart2 = dcc.Graph(
            figure=px.line(
                mas,
                x='Month',
                y='Automobile_Sales',
                title='Total Monthly Automobile Sales'
            )
        )

        # Plot 3: Average sales by vehicle type - bar chart
        avg_vehicle_sales = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        Y_chart3 = dcc.Graph(
            figure=px.bar(
                avg_vehicle_sales,
                x='Vehicle_Type',
                y='Automobile_Sales',
                title='Average Automobile Sales by Vehicle Type'
            )
        )

        # Plot 4: Total Advertisement Expenditure by vehicle type - pie chart
        exp_data = yearly_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        Y_chart4 = dcc.Graph(
            figure=px.pie(
                exp_data,
                values='Advertising_Expenditure',
                names='Vehicle_Type',
                title='Total Advertisement Expenditure by Vehicle Type'
            )
        )

        # Layout with two rows and two columns
        return html.Div([
            html.Div([Y_chart1, Y_chart2], style={'display': 'flex', 'justifyContent': 'space-around'}),
            html.Div([Y_chart3, Y_chart4], style={'display': 'flex', 'justifyContent': 'space-around', 'marginTop': '20px'})
        ])

    else:
        return html.Div("Please select a valid report type and year.", style={'color': 'red', 'fontWeight': 'bold'})

# Run the app
if __name__ == '__main__':
    app.run(debug=True)